/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import Shapes.Circle;
import Shapes.Ellipse;
import Shapes.Line;
import Shapes.Rectangle;
import Shapes.Shape;
import Shapes.ShapeFactory;
import Shapes.Square;
import Shapes.Triangle;
import gui.Canvas.Operation;
import gui.Canvas.ShapeType;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author es-LaraHossam2024
 */
public class mainGui extends javax.swing.JFrame {

    /**
     * Creates new form mainGui
     */
    public mainGui() {
        initComponents();
        this.setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Rectangle3 = new javax.swing.JButton();
        Window = new javax.swing.JPanel();
        Background = new javax.swing.JPanel();
        drawingcanvas = gui.Canvas.getInstance();
        Square = new javax.swing.JButton();
        Rectangle = new javax.swing.JButton();
        Circle = new javax.swing.JButton();
        Line = new javax.swing.JButton();
        Triangle1 = new javax.swing.JButton();
        Redo = new javax.swing.JButton();
        Undo = new javax.swing.JButton();
        Reset = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Fill = new javax.swing.JButton();
        Move = new javax.swing.JButton();
        Ellipse = new javax.swing.JButton();
        Resize = new javax.swing.JButton();
        Palette = new javax.swing.JButton();
        Clone = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        CopyPaste = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();

        Rectangle3.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Paint");
        setBackground(new java.awt.Color(204, 204, 204));
        setResizable(false);

        Background.setBackground(new java.awt.Color(255, 255, 255));

        drawingcanvas.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout drawingcanvasLayout = new javax.swing.GroupLayout(drawingcanvas);
        drawingcanvas.setLayout(drawingcanvasLayout);
        drawingcanvasLayout.setHorizontalGroup(
            drawingcanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 552, Short.MAX_VALUE)
        );
        drawingcanvasLayout.setVerticalGroup(
            drawingcanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 453, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout BackgroundLayout = new javax.swing.GroupLayout(Background);
        Background.setLayout(BackgroundLayout);
        BackgroundLayout.setHorizontalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackgroundLayout.createSequentialGroup()
                .addComponent(drawingcanvas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        BackgroundLayout.setVerticalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(drawingcanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        Square.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/Square.png"))); // NOI18N
        Square.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SquareActionPerformed(evt);
            }
        });

        Rectangle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/rectangle.png"))); // NOI18N
        Rectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RectangleActionPerformed(evt);
            }
        });

        Circle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/Circle.png"))); // NOI18N
        Circle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CircleActionPerformed(evt);
            }
        });

        Line.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/Line.png"))); // NOI18N
        Line.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LineActionPerformed(evt);
            }
        });

        Triangle1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/Triangle.png"))); // NOI18N
        Triangle1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Triangle1ActionPerformed(evt);
            }
        });

        Redo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/Redo.png"))); // NOI18N
        Redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedoActionPerformed(evt);
            }
        });

        Undo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/Undo.png"))); // NOI18N
        Undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UndoActionPerformed(evt);
            }
        });

        Reset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/trash_32px.png"))); // NOI18N
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        Delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/deleteONE.png"))); // NOI18N
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        Fill.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/Fill.png"))); // NOI18N
        Fill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FillActionPerformed(evt);
            }
        });

        Move.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/Move.png"))); // NOI18N
        Move.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveActionPerformed(evt);
            }
        });

        Ellipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/ellipse2.png"))); // NOI18N
        Ellipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EllipseActionPerformed(evt);
            }
        });

        Resize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/Resize.png"))); // NOI18N
        Resize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResizeActionPerformed(evt);
            }
        });

        Palette.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/palette.png"))); // NOI18N
        Palette.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaletteActionPerformed(evt);
            }
        });

        Clone.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/copy_32px.png"))); // NOI18N
        Clone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloneActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/lano.png"))); // NOI18N

        CopyPaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/pasye.png"))); // NOI18N
        CopyPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyPasteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout WindowLayout = new javax.swing.GroupLayout(Window);
        Window.setLayout(WindowLayout);
        WindowLayout.setHorizontalGroup(
            WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WindowLayout.createSequentialGroup()
                .addGroup(WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(WindowLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(WindowLayout.createSequentialGroup()
                                .addComponent(Clone, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(CopyPaste, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(WindowLayout.createSequentialGroup()
                                .addComponent(Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(WindowLayout.createSequentialGroup()
                                .addComponent(Circle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Ellipse, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(WindowLayout.createSequentialGroup()
                                .addComponent(Line, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Triangle1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(WindowLayout.createSequentialGroup()
                                .addComponent(Rectangle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Square, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(WindowLayout.createSequentialGroup()
                                .addComponent(Undo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Redo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(WindowLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Resize, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Move, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(WindowLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel1))
                    .addGroup(WindowLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(Palette, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Fill, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(Background, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        WindowLayout.setVerticalGroup(
            WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WindowLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(WindowLayout.createSequentialGroup()
                        .addGroup(WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Undo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Redo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(WindowLayout.createSequentialGroup()
                                .addComponent(Rectangle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(WindowLayout.createSequentialGroup()
                                        .addGroup(WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Line, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Triangle1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(14, 14, 14)
                                        .addComponent(Ellipse, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(Circle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(Square, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Resize, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Move, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Clone, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CopyPaste, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(WindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Palette)
                            .addComponent(Fill, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jMenu1.setText("File");

        jMenuItem1.setText("Save File");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem5.setText("New File");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem2.setText("Resize");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Copy");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Move");
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Draw");

        jMenuItem6.setText("Rectangle");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        jMenuItem7.setText("Square");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuItem8.setText("Line");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        jMenuItem9.setText("Circle");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem9);

        jMenuItem10.setText("Ellipse");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem10);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Color");

        jMenuItem13.setText("Outline Color");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem13);

        jMenuItem14.setText("Fill Shape");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem14);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Window, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(Window, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        String name = JOptionPane.showInputDialog(null, "Enter File name");
        try {
            drawingcanvas.exportImage(name + ".png");
        } catch (IOException ex) {
            Logger.getLogger(mainGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        drawingcanvas.operation = Operation.COPY;
        drawingcanvas.type = null;    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        drawingcanvas.type = ShapeType.RECTANGLE;
        drawingcanvas.operation = null;    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        drawingcanvas.type = ShapeType.SQUARE;
        drawingcanvas.operation = null;    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        Color NewColor = JColorChooser.showDialog(null, "Choose an outline color", Color.BLACK);
        drawingcanvas.newColor = NewColor;    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        drawingcanvas.type = null;
        drawingcanvas.operation = null;
        drawingcanvas.shapes.clear();
        drawingcanvas.setBackground(Color.white);
        Action.actions_undo.clear();
        Action.actions_redo.clear();
        repaint();    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        drawingcanvas.type = ShapeType.LINE;
        drawingcanvas.operation = null;    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        drawingcanvas.type = ShapeType.CIRCLE;
        drawingcanvas.operation = null;    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        drawingcanvas.type = ShapeType.ELLIPSE;
        drawingcanvas.operation = null;    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        drawingcanvas.operation = Operation.COLOR;
        drawingcanvas.type = null;
        Color NewFillColor = JColorChooser.showDialog(null, "Choose a fill color", Color.BLACK);
        drawingcanvas.newFillColor = NewFillColor;
        drawingcanvas.newColor = Color.BLACK;
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void CloneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloneActionPerformed
        drawingcanvas.operation = Operation.CLONE;
        drawingcanvas.type = null;
    }//GEN-LAST:event_CloneActionPerformed

    private void PaletteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaletteActionPerformed
        Color NewColor = JColorChooser.showDialog(null, "Choose an outline color", Color.BLACK);
        drawingcanvas.newColor = NewColor;
        drawingcanvas.operation = null;
    }//GEN-LAST:event_PaletteActionPerformed

    private void ResizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResizeActionPerformed
        drawingcanvas.operation = Operation.RESIZE;
        drawingcanvas.type = null;
    }//GEN-LAST:event_ResizeActionPerformed

    private void EllipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EllipseActionPerformed
        drawingcanvas.type = ShapeType.ELLIPSE;
        drawingcanvas.operation = null;
    }//GEN-LAST:event_EllipseActionPerformed

    private void MoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveActionPerformed
        drawingcanvas.operation = Operation.MOVE;
        drawingcanvas.type = null;
    }//GEN-LAST:event_MoveActionPerformed

    private void FillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FillActionPerformed
        drawingcanvas.operation = Operation.COLOR;
        drawingcanvas.type = null;
        drawingcanvas.newColor = Color.BLACK;
        Color NewFillColor = JColorChooser.showDialog(null, "Choose a fill color", Color.BLACK);
        drawingcanvas.newFillColor = NewFillColor;
    }//GEN-LAST:event_FillActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        drawingcanvas.operation = Operation.DELETE;
        drawingcanvas.type = null;

    }//GEN-LAST:event_DeleteActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        drawingcanvas.operation = Operation.CLEAR;
        drawingcanvas.type = null;
        ArrayList<Shape> shapesTemp = new ArrayList<Shape>();
        for(int i = 0; i<drawingcanvas.shapes.size(); i++)
        {
            shapesTemp.add(drawingcanvas.shapes.get(i));
        }
        drawingcanvas.shapes.clear();
        Action a = new Action(shapesTemp);
        Action.actions_undo.push(a);
        drawingcanvas.setBackground(Color.WHITE);
        repaint();
    }//GEN-LAST:event_ResetActionPerformed

    private void UndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UndoActionPerformed
        if(!Action.actions_undo.isEmpty())
        {
            ShapeFactory factorygui;;
            Action last = Action.actions_undo.pop();
            System.out.println("Undoing "+last.getOp());
            Action.actions_redo.push(last);
            switch(last.getOp())
            {
                case DRAW, CLONE, COPY:
                for(int i = 0; i < drawingcanvas.shapes.size(); i++)
                {
                    if(last.getNew_shape().getClass().equals(drawingcanvas.shapes.get(i).getClass()))
                    if(last.getNew_shape().equals(drawingcanvas.shapes.get(i)))
                    {
                        drawingcanvas.shapes.remove(i);
                    }
                }
                drawingcanvas.repaint();
                break;
                case RESIZE, MOVE:
                for(int i = 0; i < drawingcanvas.shapes.size(); i++)
                {
                    if(last.getNew_shape().getClass().equals(drawingcanvas.shapes.get(i).getClass())){    
                    if(last.getNew_shape().equals(drawingcanvas.shapes.get(i)))
                    {
                        Shape temp = null;
                        if(last.getOld_shape() instanceof Square)
                        {
                            Square s = (Square) last.getOld_shape();
                            factorygui = new ShapeFactory(s.getX(), s.getY(), s.getSide(), s.getSide(), ShapeFactory.ShapeType.SQUARE,s.getColor(), s.getFillColor());
                            temp = factorygui.copyShape();
                        }
                        else if(last.getOld_shape() instanceof Line)
                        {
                            Line l = (Line) last.getOld_shape();
                            factorygui = new ShapeFactory(l.getX1(), l.getY1(), l.getX2(), l.getY2(), ShapeFactory.ShapeType.LINE, l.getColor(), l.getFillColor());
                            temp = factorygui.copyShape();
                            
                        }else if(last.getOld_shape() instanceof Rectangle)
                        {
                            Rectangle r = (Rectangle) last.getOld_shape();
                            factorygui = new ShapeFactory(r.getX(), r.getY(), r.getWidth(), r.getHeight(), ShapeFactory.ShapeType.RECTANGLE, r.getColor(), r.getFillColor());
                            temp = factorygui.copyShape();
                        }else if(last.getOld_shape() instanceof Circle)
                        {
                            Circle c = (Circle) last.getOld_shape();
                            factorygui = new ShapeFactory(c.getX(), c.getY(), c.getSide(), c.getSide(), ShapeFactory.ShapeType.CIRCLE, c.getColor(), c.getFillColor());
                            temp = factorygui.copyShape();
                        }
                        else if(last.getOld_shape() instanceof Ellipse)
                        {
                            Ellipse el = (Ellipse) last.getOld_shape();
                            factorygui = new ShapeFactory(el.getX(), el.getY(), el.getWidth(), el.getHeight(), ShapeFactory.ShapeType.ELLIPSE, el.getColor(), el.getFillColor());
                            temp = factorygui.copyShape();
                        }
                        else if(last.getOld_shape() instanceof Triangle)
                        {
                            Triangle t = (Triangle) last.getOld_shape();
                            factorygui = new ShapeFactory(t.getX1(), t.getY1(), t.getX2(), t.getY2(), t.getX3(), t.getY3(), t.getColor(), t.getFillColor());
                            temp = factorygui.copyShape();
                        }
                        if(temp!=null)
                        drawingcanvas.shapes.set(i, temp);
                        break;
                    }
                }}
                drawingcanvas.repaint();
                break;
                case DELETE:
                drawingcanvas.shapes.add(last.getOld_shape());
                drawingcanvas.repaint();
                break;
                case CLEAR:
                drawingcanvas.shapes.addAll(last.getShapes());
                drawingcanvas.repaint();
                break;
                case COLOR:
                if(drawingcanvas.toBeColored!=null)
                {
                    Shape temp = null;
                    for(int i = 0; i < drawingcanvas.shapes.size(); i++)
                    {
                        if(last.getOld_shape().getClass().equals(drawingcanvas.shapes.get(i).getClass()))                        
                        if(last.getOld_shape().equals(drawingcanvas.shapes.get(i)))
                        {
                            temp = drawingcanvas.shapes.get(i);
                        }
                    }
                    if(temp!=null){
                        if(last.getOldColor() != null)
                            temp.setFillColor(last.getOldColor());
                        else
                            temp.setFillColor(Color.white);
                    drawingcanvas.repaint();
                    }                    
                }
                break;
                case BACKGROUND:
                    drawingcanvas.setBackground(last.getOldColor());
                    break;
            }
        }
    }//GEN-LAST:event_UndoActionPerformed

    private void RedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RedoActionPerformed
        if(!Action.actions_redo.isEmpty())
        {
            ShapeFactory factorygui;
            Action last = Action.actions_redo.pop();
            System.out.println("Redoing "+last.getOp());
            Action.actions_undo.push(last);
            switch(last.getOp())
            {
                case DRAW, CLONE, COPY:
                if(last.getNew_shape() != null)
                drawingcanvas.shapes.add(last.getNew_shape());
                drawingcanvas.repaint();
                break;
                case RESIZE, MOVE:
                for(int i = 0; i < drawingcanvas.shapes.size(); i++)
                {
                    if(last.getOld_shape().getClass().equals(drawingcanvas.shapes.get(i).getClass()))
                    if(last.getOld_shape().equals(drawingcanvas.shapes.get(i)))
                    {
                        Shape temp = null;
                        if(last.getOld_shape() instanceof Square)
                        {
                            Square s = (Square) last.getNew_shape();
                            factorygui = new ShapeFactory(s.getX(), s.getY(), s.getSide(), s.getSide(), ShapeFactory.ShapeType.SQUARE,s.getColor(), s.getFillColor());
                            temp = factorygui.copyShape();
                        }
                        else if(last.getOld_shape() instanceof Line)
                        {
                            Line l = (Line) last.getNew_shape();
                            factorygui = new ShapeFactory(l.getX1(), l.getY1(), l.getX2(), l.getY2(), ShapeFactory.ShapeType.LINE, l.getColor(), l.getFillColor());
                            temp = factorygui.copyShape();
                            
                        }else if(last.getOld_shape() instanceof Rectangle)
                        {
                            Rectangle r = (Rectangle) last.getNew_shape();
                            factorygui = new ShapeFactory(r.getX(), r.getY(), r.getWidth(), r.getHeight(), ShapeFactory.ShapeType.RECTANGLE, r.getColor(), r.getFillColor());
                            temp = factorygui.copyShape();
                        }else if(last.getOld_shape() instanceof Circle)
                        {
                            Circle c = (Circle) last.getNew_shape();
                            factorygui = new ShapeFactory(c.getX(), c.getY(), c.getSide(), c.getSide(), ShapeFactory.ShapeType.CIRCLE, c.getColor(), c.getFillColor());
                            temp = factorygui.copyShape();
                        }
                        else if(last.getOld_shape() instanceof Ellipse)
                        {
                            Ellipse el = (Ellipse) last.getNew_shape();
                            factorygui = new ShapeFactory(el.getX(), el.getY(), el.getWidth(), el.getHeight(), ShapeFactory.ShapeType.ELLIPSE, el.getColor(), el.getFillColor());
                            temp = factorygui.copyShape();
                        }
                        else if(last.getOld_shape() instanceof Triangle)
                        {
                            Triangle t = (Triangle) last.getNew_shape();
                            factorygui = new ShapeFactory(t.getX1(), t.getY1(), t.getX2(), t.getY2(), t.getX3(), t.getY3(), t.getColor(), t.getFillColor());
                            temp = factorygui.copyShape();
                        }
                        if(temp!=null)
                        drawingcanvas.shapes.set(i, temp);
                    }
                    drawingcanvas.repaint();
                }
                break;
                case DELETE:
                for(int i = 0; i < drawingcanvas.shapes.size(); i++)
                {
                    if(last.getOld_shape().getClass().equals(drawingcanvas.shapes.get(i).getClass()))
                    if(last.getOld_shape().equals(drawingcanvas.shapes.get(i)))
                    {
                        drawingcanvas.shapes.remove(i);
                    }
                }
                drawingcanvas.repaint();
                break;
                case CLEAR:
                drawingcanvas.shapes.clear();
                drawingcanvas.repaint();
                break;
                case COLOR:
                Shape temp = null;    
                for(int i = 0; i < drawingcanvas.shapes.size(); i++){
                    if(last.getOld_shape().getClass().equals(drawingcanvas.shapes.get(i).getClass()))
                    if(last.getOld_shape().equals(drawingcanvas.shapes.get(i)))
                    {
                        if(last.getOld_shape() instanceof Square)
                        {
                            Square s = (Square) last.getOld_shape();
                            factorygui = new ShapeFactory(s.getX(), s.getY(), s.getSide(), s.getSide(), ShapeFactory.ShapeType.SQUARE,s.getColor(), s.getFillColor());
                            temp = factorygui.copyShape();
                        }
                        else if(last.getOld_shape() instanceof Line)
                        {
                            Line l = (Line) last.getOld_shape();
                            factorygui = new ShapeFactory(l.getX1(), l.getY1(), l.getX2(), l.getY2(), ShapeFactory.ShapeType.LINE, l.getColor(), l.getFillColor());
                            temp = factorygui.copyShape();
                            
                        }else if(last.getOld_shape() instanceof Rectangle)
                        {
                            Rectangle r = (Rectangle) last.getOld_shape();
                            factorygui = new ShapeFactory(r.getX(), r.getY(), r.getWidth(), r.getHeight(), ShapeFactory.ShapeType.RECTANGLE, r.getColor(), r.getFillColor());
                            temp = factorygui.copyShape();
                        }else if(last.getOld_shape() instanceof Circle)
                        {
                            Circle c = (Circle) last.getOld_shape();
                            factorygui = new ShapeFactory(c.getX(), c.getY(), c.getSide(), c.getSide(), ShapeFactory.ShapeType.CIRCLE, c.getColor(), c.getFillColor());
                            temp = factorygui.copyShape();
                        }
                        else if(last.getOld_shape() instanceof Ellipse)
                        {
                            Ellipse el = (Ellipse) last.getOld_shape();
                            factorygui = new ShapeFactory(el.getX(), el.getY(), el.getWidth(), el.getHeight(), ShapeFactory.ShapeType.ELLIPSE, el.getColor(), el.getFillColor());
                            temp = factorygui.copyShape();
                        }
                        else if(last.getOld_shape() instanceof Triangle)
                        {
                            Triangle t = (Triangle) last.getOld_shape();
                            factorygui = new ShapeFactory(t.getX1(), t.getY1(), t.getX2(), t.getY2(), t.getX3(), t.getY3(), t.getColor(), t.getFillColor());
                            temp = factorygui.copyShape();
                        }
                        if(temp!=null)
                        {
                            temp.setFillColor(last.getNewColor());
                            drawingcanvas.shapes.set(i, temp);                                              
                        }
                    }
                }
                drawingcanvas.repaint();
                break;
                case BACKGROUND:
                    Color new_bg = new Color(last.getNewColor().getRGB());
                    drawingcanvas.setBackground(new_bg);
                    break;
            }
        }
    }//GEN-LAST:event_RedoActionPerformed

    private void Triangle1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Triangle1ActionPerformed
        drawingcanvas.type = ShapeType.TRIANGLE;
        drawingcanvas.operation = null;
    }//GEN-LAST:event_Triangle1ActionPerformed

    private void LineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LineActionPerformed
        drawingcanvas.type = ShapeType.LINE;
        drawingcanvas.operation = null;
    }//GEN-LAST:event_LineActionPerformed

    private void CircleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CircleActionPerformed
        drawingcanvas.type = ShapeType.CIRCLE;
        drawingcanvas.operation = null;
    }//GEN-LAST:event_CircleActionPerformed

    private void RectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RectangleActionPerformed
        drawingcanvas.type = ShapeType.RECTANGLE;
        drawingcanvas.operation = null;
    }//GEN-LAST:event_RectangleActionPerformed

    private void SquareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SquareActionPerformed
        drawingcanvas.type = ShapeType.SQUARE;
        drawingcanvas.operation = null;
    }//GEN-LAST:event_SquareActionPerformed

    private void CopyPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyPasteActionPerformed
        drawingcanvas.type = null;
        drawingcanvas.operation = Operation.COPY;
    }//GEN-LAST:event_CopyPasteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Background;
    private javax.swing.JButton Circle;
    private javax.swing.JButton Clone;
    private javax.swing.JButton CopyPaste;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Ellipse;
    private javax.swing.JButton Fill;
    private javax.swing.JButton Line;
    private javax.swing.JButton Move;
    private javax.swing.JButton Palette;
    private javax.swing.JButton Rectangle;
    private javax.swing.JButton Rectangle3;
    private javax.swing.JButton Redo;
    private javax.swing.JButton Reset;
    private javax.swing.JButton Resize;
    private javax.swing.JButton Square;
    private javax.swing.JButton Triangle1;
    private javax.swing.JButton Undo;
    private javax.swing.JPanel Window;
    private gui.Canvas drawingcanvas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    // End of variables declaration//GEN-END:variables
}
